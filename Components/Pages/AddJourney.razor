@page "/AddJourney"
@using ScrapBook.Repositories
@inject IJourneyImageRepository JourneyImageRepository
@inject IJourneyRepository JourneyRepository
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Add a New Journey</h3>

<EditForm Model="NewJourney" OnValidSubmit="HandleValidSubmit" FormName="AddJourneyForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="NewJourney.Title" class="form-control" />
    </div>

    <div>
        <label for="text">Text</label>
        <InputTextArea id="text" @bind-Value="NewJourney.Text" class="form-control" />
    </div>

    <div>
        <label for="date">Date</label>
        <InputDate id="date" @bind-Value="NewJourney.Date" class="form-control" />
    </div>

    <div>
        <label for="images">Upload Images</label>
        <InputFile OnChange="HandleFileSelection" multiple />
        <ul>
            @foreach (var file in UploadedFiles)
            {
                <li>@file.FileName</li>
            }
        </ul>
    </div>
    
    <button type="submit" class="btn btn-primary">Add Journey</button>

</EditForm>

@code {
    private Journey NewJourney = new Journey();
    private List<(string FileName, byte[] content)> UploadedFiles = new();

    private async void HandleFileSelection(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);

            // Store file name and content as a tuple
            UploadedFiles.Add((file.Name, memoryStream.ToArray()));
        }
    }
    
    private async Task HandleValidSubmit()
    {
        // Add images to the journey
        foreach (var (fileName, content) in UploadedFiles)
        {
            var uniqueFileName = $"{Guid.NewGuid()}-{fileName}";
            var path = Path.Combine("wwwroot/uploads", uniqueFileName);

            // Save file to disk
            await File.WriteAllBytesAsync(path, content);

            // Add the image to the journey's image list
            NewJourney.Images.Add(new JourneyImage
            {
                ImagePath = $"/uploads/{uniqueFileName}"
            });
        }
        
        // gem
        await JourneyRepository.AddAsync(NewJourney);
        
        // reset
        NewJourney = new Journey();
        UploadedFiles.Clear();
        
        // Redirect
        NavigationManager.NavigateTo("/view-journeys");
        
    }
}