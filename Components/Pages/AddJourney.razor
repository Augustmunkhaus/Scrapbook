@page "/AddJourney"
@using ScrapBook.Repositories
@inject IJourneyImageRepository JourneyImageRepository
@inject IJourneyRepository JourneyRepository
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Add a New Journey</h3>

<EditForm Model="NewJourney" OnValidSubmit="HandleValidSubmit" FormName="AddJourneyForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="NewJourney.Title" class="form-control" />
    </div>

    <div>
        <label for="text">Text</label>
        <InputTextArea id="text" @bind-Value="NewJourney.Text" class="form-control" />
    </div>

    <div>
        <label for="date">Date</label>
        <InputDate id="date" @bind-Value="NewJourney.Date" class="form-control" />
    </div>

    <div>
        <label for="images">Upload Images</label>
        <InputFile OnChange="HandleFileUpload" multiple />
        <ul>
            @foreach (var file in UploadedFiles)
            {
                <li>@file.Name</li>
            }
        </ul>
    </div>
    
    <button type="button" @onclick="LogJourneyState">Log Journey State</button>

    <button type="submit" class="btn btn-primary">Add Journey</button>
    <button type="button" @onclick="TestClick">Click Me</button>

</EditForm>

@code {
    private Journey NewJourney = new Journey();
    private List<IBrowserFile> UploadedFiles = new List<IBrowserFile>();

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        UploadedFiles.AddRange(e.GetMultipleFiles());
    }
    
    private void LogJourneyState()
    {
        Console.WriteLine($"Logging: Title={NewJourney.Title}, Text={NewJourney.Text}, Date={NewJourney.Date}");
    }
    private void TestClick()
    {
        Console.WriteLine("Button was clicked!");
    }

    private async Task HandleValidSubmit()
    {
        // Add images to the journey
        foreach (var file in UploadedFiles)
        {
            var uniqueFileName = $"{Guid.NewGuid()}-{file.Name}";
            var path = Path.Combine("wwwroot/uploads", uniqueFileName);

            // Save file to disk
            using (var stream = new FileStream(path, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
            }

            // Add the image to the journey's image list
            NewJourney.Images.Add(new JourneyImage
            {
                ImagePath = $"/uploads/{uniqueFileName}"
            });
        }
        
        // gem
        await JourneyRepository.AddAsync(NewJourney);
        
        // reset
        NewJourney = new Journey();
        UploadedFiles.Clear();
        
        // Redirect
        NavigationManager.NavigateTo("/view-journeys");
        
    }
}